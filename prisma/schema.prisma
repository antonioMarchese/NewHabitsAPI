// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique // o nome de usuário deve ser único!

  first_name String
  last_name  String
  email      String      @unique // cada email só pode ter um usuário cadastrado
  password   String
  avatar     String?
  phone      String?
  created_at DateTime
  updated_at DateTime
  habits     Habit[] // cada user possui vários hábitos
  Day        Day[] // cada usuário pode ter vários dias relacionados 
  followers  Follower[] // Cada usuário pode ter vários seguidores
  following  Following[] // Cada usuário pode seguir vários outros 

  @@map("users")
}

model Habit {
  id         String          @id @default(uuid())
  title      String
  created_at DateTime
  deleted_at DateTime?
  dayHabits  DayHabit[] // isso não é um campo! é para o javascript
  weekDays   HabitWeekDays[]
  user_id    String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("habits")
}

model HabitWeekDays {
  id       String @id @default(uuid())
  habit_id String
  week_day Int

  habit Habit @relation(fields: [habit_id], references: [id], onDelete: Cascade)

  @@unique([habit_id, week_day])
  @@map("habit_week_days")
}

model Day {
  id        String     @id @default(uuid())
  date      DateTime
  dayHabits DayHabit[]

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([date, user_id]) // cada registro terá o campo date unico
  @@map("days")
}

model DayHabit {
  id String @id @default(uuid())

  day_id   String
  habit_id String

  day   Day   @relation(fields: [day_id], references: [id], onDelete: Cascade)
  habit Habit @relation(fields: [habit_id], references: [id], onDelete: Cascade)

  @@unique([day_id, habit_id])
  @@map("day_habits")
}

model Follower {
  username String
  user_id  String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, username])
  @@map("follower")
}

model Following {
  username String
  user_id  String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, username])
  @@map("following")
}
